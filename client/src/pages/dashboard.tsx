import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { TrendCard } from "@/components/TrendCard";
import { AISuggestionCard } from "@/components/AISuggestionCard";
import { StatusIndicator } from "@/components/StatusIndicator";
import { EmailPreviewModal } from "@/components/EmailPreviewModal";
import { TrendingUp, Lightbulb, FileText, Globe, RefreshCw, Eye, Download, Users } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest } from "@/lib/queryClient";

export default function Dashboard() {
  const [isEmailPreviewOpen, setIsEmailPreviewOpen] = useState(false);
  const { toast } = useToast();

  const { data: dashboardData, isLoading: isDashboardLoading, refetch: refetchDashboard } = useQuery({
    queryKey: ['/api/dashboard'],
  });

  const { data: schedulerStatus } = useQuery({
    queryKey: ['/api/scheduler/status'],
  });

  const trends = dashboardData?.trends || [];
  const suggestions = dashboardData?.suggestions || [];
  const sources = dashboardData?.sources || [];
  const analytics = dashboardData?.analytics || {};

  const handleRefresh = async () => {
    try {
      await apiRequest('POST', '/api/analyze');
      await refetchDashboard();
      toast({
        title: "Data refreshed",
        description: "Trend analysis has been updated successfully.",
      });
    } catch (error) {
      toast({
        title: "Refresh failed",
        description: "Failed to refresh trend data. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handlePreviewEmail = () => {
    setIsEmailPreviewOpen(true);
  };

  const handleSendTestEmail = async (email: string) => {
    try {
      await apiRequest('POST', '/api/email/test', { email });
      toast({
        title: "Test email sent",
        description: `Test email has been sent to ${email}`,
      });
      setIsEmailPreviewOpen(false);
    } catch (error) {
      toast({
        title: "Failed to send test email",
        description: "Please check your email configuration and try again.",
        variant: "destructive",
      });
    }
  };

  const handleGenerateReport = async () => {
    try {
      await apiRequest('POST', '/api/reports/generate');
      toast({
        title: "Report generated",
        description: "Daily report has been generated and sent successfully.",
      });
    } catch (error) {
      toast({
        title: "Report generation failed",
        description: "Failed to generate the daily report. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleExportSuggestion = (suggestion: any) => {
    const content = `
Brand Opportunity: ${suggestion.title}

Description: ${suggestion.description}

Impact: ${suggestion.impact}
Effort: ${suggestion.effort}
Type: ${suggestion.type}

Generated by TrendScope AI
Date: ${new Date().toLocaleDateString()}
    `.trim();

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${suggestion.title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    toast({
      title: "Suggestion exported",
      description: "Brand suggestion has been downloaded as a text file.",
    });
  };

  if (isDashboardLoading) {
    return (
      <div className="min-h-screen bg-gray-50 p-4">
        <div className="max-w-7xl mx-auto">
          <div className="animate-pulse space-y-8">
            <div className="h-8 bg-gray-200 rounded w-1/3"></div>
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
              {[...Array(4)].map((_, i) => (
                <div key={i} className="h-32 bg-gray-200 rounded-lg"></div>
              ))}
            </div>
            <div className="h-96 bg-gray-200 rounded-lg"></div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">Cultural Intelligence Dashboard</h1>
              <p className="text-gray-600 mt-1">
                Fashion & Lifestyle Trends â€¢ Last updated {new Date().toLocaleTimeString()}
              </p>
            </div>
            <div className="flex items-center space-x-4">
              <StatusIndicator 
                status={schedulerStatus?.isScrapingRunning ? 'running' : 'active'} 
                showText={true}
              />
              <Button onClick={handleRefresh} variant="default">
                <RefreshCw className="w-4 h-4 mr-2" />
                Refresh Data
              </Button>
            </div>
          </div>
        </div>

        {/* Status Overview */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Trends Identified</p>
                  <p className="text-3xl font-bold text-gray-900 mt-2">{analytics.totalTrends || 0}</p>
                </div>
                <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                  <TrendingUp className="text-primary text-xl" />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <span className="text-sm text-green-600 font-medium">+{trends.length} today</span>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Sources Monitored</p>
                  <p className="text-3xl font-bold text-gray-900 mt-2">{sources.length}</p>
                </div>
                <div className="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                  <Globe className="text-green-600 text-xl" />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <span className="text-sm text-gray-600">{analytics.activeSourcesCount || 0} active</span>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">AI Suggestions</p>
                  <p className="text-3xl font-bold text-gray-900 mt-2">{analytics.totalSuggestions || 0}</p>
                </div>
                <div className="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                  <Lightbulb className="text-purple-600 text-xl" />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <span className="text-sm text-gray-600">{suggestions.length} today</span>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-gray-500">Reports Sent</p>
                  <p className="text-3xl font-bold text-gray-900 mt-2">{analytics.totalReports || 0}</p>
                </div>
                <div className="w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center">
                  <FileText className="text-yellow-600 text-xl" />
                </div>
              </div>
              <div className="flex items-center mt-4">
                <span className="text-sm text-gray-600">Last: {analytics.lastReportDate || 'Never'}</span>
              </div>
            </CardContent>
          </Card>
        </div>

        {/* Main Content */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Trends Section */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <CardTitle>Latest Cultural Trends</CardTitle>
                <p className="text-sm text-gray-500">
                  Cultural signals detected in the last 24 hours
                </p>
              </CardHeader>
              <CardContent className="space-y-4">
                {trends.length > 0 ? (
                  trends.map((trend: any) => (
                    <TrendCard key={trend.id} trend={trend} />
                  ))
                ) : (
                  <div className="text-center py-8">
                    <TrendingUp className="w-12 h-12 text-gray-400 mx-auto mb-4" />
                    <p className="text-gray-500">No trends available yet</p>
                    <p className="text-sm text-gray-400">Run an analysis to detect cultural trends</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* AI Suggestions */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Lightbulb className="w-5 h-5 mr-2 text-purple-600" />
                  AI Suggestions
                </CardTitle>
                <p className="text-sm text-gray-500">Based on latest trends</p>
              </CardHeader>
              <CardContent className="space-y-4">
                {suggestions.length > 0 ? (
                  suggestions.map((suggestion: any) => (
                    <AISuggestionCard 
                      key={suggestion.id} 
                      suggestion={suggestion}
                      onExport={handleExportSuggestion}
                    />
                  ))
                ) : (
                  <div className="text-center py-4">
                    <Lightbulb className="w-8 h-8 text-gray-400 mx-auto mb-2" />
                    <p className="text-sm text-gray-500">No suggestions available</p>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Quick Actions */}
            <Card>
              <CardHeader>
                <CardTitle>Quick Actions</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={handleGenerateReport}
                >
                  <FileText className="w-4 h-4 mr-2" />
                  Generate Report
                </Button>
                <Button 
                  variant="outline" 
                  className="w-full justify-start"
                  onClick={handlePreviewEmail}
                >
                  <Eye className="w-4 h-4 mr-2" />
                  Preview Email
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <Download className="w-4 h-4 mr-2" />
                  Export Data
                </Button>
                <Button variant="outline" className="w-full justify-start">
                  <Users className="w-4 h-4 mr-2" />
                  Manage Recipients
                </Button>
              </CardContent>
            </Card>

            {/* Source Status */}
            <Card>
              <CardHeader>
                <CardTitle>Source Status</CardTitle>
                <p className="text-sm text-gray-500">Real-time monitoring status</p>
              </CardHeader>
              <CardContent className="space-y-3">
                {sources.map((source: any) => (
                  <div key={source.id} className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <StatusIndicator status={source.status} showText={false} />
                      <span className="text-sm font-medium text-gray-900">{source.name}</span>
                    </div>
                    <span className="text-xs text-gray-500">
                      {source.lastCheck 
                        ? new Date(source.lastCheck).toLocaleTimeString() 
                        : 'Never'
                      }
                    </span>
                  </div>
                ))}
              </CardContent>
            </Card>
          </div>
        </div>

        {/* Email Preview Modal */}
        <EmailPreviewModal
          isOpen={isEmailPreviewOpen}
          onClose={() => setIsEmailPreviewOpen(false)}
          trends={trends}
          suggestions={suggestions}
          onSendTest={handleSendTestEmail}
        />
      </div>
    </div>
  );
}
